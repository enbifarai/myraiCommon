@using myRaiData;
@using myRaiHelper;
@using myRaiCommonModel;
@using myRaiCommonManager;
@using MVCProject.Custom_Helpers;
@using MyRaiServiceInterface.it.rai.servizi.digigappws;

@model myRaiData.MyRai_Regole_SchedeEccezioni

<div class="row" style="display:flex">
    <div class="col-sm-8" style="padding-top:30px">

        @*<h2 class="dett-ecc1">@Model.descrittiva (@Model.codice)</h2>*@
        <input type="hidden" id="descrittiva-breve" value="@Model.descrittiva (@Model.codice)" />
        @{
            var campodef = Model.MyRai_Regole_CampiDinamici.ValidToday( ).Where( x => x.Posizione == ( int ) EnumPosizioniCampo.Prima_del_campo_DEFINIZIONE ).ToList( );
            var campocri = Model.MyRai_Regole_CampiDinamici.ValidToday( ).Where( x => x.Posizione == ( int ) EnumPosizioniCampo.Prima_del_campo_CRITERI_DI_INSERIMENTO ).ToList( );
            var campoall = Model.MyRai_Regole_CampiDinamici.ValidToday( ).Where( x => x.Posizione == ( int ) EnumPosizioniCampo.Prima_del_campo_ALLEGATI ).ToList( );
            var campodoc = Model.MyRai_Regole_CampiDinamici.ValidToday( ).Where( x => x.Posizione == ( int ) EnumPosizioniCampo.Prima_del_campo_DOCUMENTAZIONE ).ToList( );
            var campofon = Model.MyRai_Regole_CampiDinamici.ValidToday( ).Where( x => x.Posizione == ( int ) EnumPosizioniCampo.Prima_del_campo_FONTI_DELLA_DISCIPLINA ).ToList( );
            var camponot = Model.MyRai_Regole_CampiDinamici.ValidToday( ).Where( x => x.Posizione == ( int ) EnumPosizioniCampo.Prima_del_campo_NOTE ).ToList( );
            var campopre = Model.MyRai_Regole_CampiDinamici.ValidToday( ).Where( x => x.Posizione == ( int ) EnumPosizioniCampo.Prima_del_campo_PRESUPPOSTI_E_PROCEDURE ).ToList( );
            var campotra = Model.MyRai_Regole_CampiDinamici.ValidToday( ).Where( x => x.Posizione == ( int ) EnumPosizioniCampo.Prima_del_campo_TRATTAMENTO_ECONOMICO ).ToList( );
            var campoult = Model.MyRai_Regole_CampiDinamici.ValidToday( ).Where( x => x.Posizione == ( int ) EnumPosizioniCampo.Prima_del_campo_ULTERIORI_INFORMAZIONI ).ToList( );
            var campoNoPos = Model.MyRai_Regole_CampiDinamici.ValidToday( ).Where( x => x.Posizione == null ).ToList( );

        }
        @if ( !String.IsNullOrWhiteSpace( Model.descrittiva_libera ) )
        {
            <input type="hidden" id="descrittiva-estesa" value="@Html.Raw(Model.descrittiva_libera)" />
        }

        @foreach ( var item in campodef )
        {
            <h3 class="dett-ecc2">@(item.chiave != null ? item.chiave.ToUpper( ) : "") </h3>
            @Html.Raw( item.valore )
        }
        @if ( !String.IsNullOrWhiteSpace( Model.definizione ) )
        {
            <h3 class="dett-ecc2">DEFINIZIONE</h3>
            @Html.Raw( Model.definizione )
        }

        @foreach ( var item in campotra )
        {
            <h3 class="dett-ecc2">@(item.chiave != null ? item.chiave.ToUpper( ) : "") </h3>
            @Html.Raw( item.valore )
        }
        @if ( !String.IsNullOrWhiteSpace( Model.trattamento_economico ) )
        {
            <h3 class="dett-ecc2">TRATTAMENTO ECONOMICO</h3>
            @Html.Raw( Model.trattamento_economico )
        }

        @foreach ( var item in campodoc )
        {
            <h3 class="dett-ecc2">@(item.chiave != null ? item.chiave.ToUpper( ) : "") </h3>
            @Html.Raw( item.valore )
        }
        @if ( !String.IsNullOrWhiteSpace( Model.presupposti_documentazione ) )
        {
            <h3 class="dett-ecc2">DOCUMENTAZIONE</h3>
            @Html.Raw( Model.presupposti_documentazione )
        }



        @foreach ( var item in campopre )
        {
            <h3 class="dett-ecc2">@(item.chiave != null ? item.chiave.ToUpper( ) : "") </h3>
            @Html.Raw( item.valore )
        }
        @if ( !String.IsNullOrWhiteSpace( Model.presupposti_procedure ) )
        {
            <h3 class="dett-ecc2">PRESUPPOSTI E PROCEDURE</h3>
            @Html.Raw( Model.presupposti_procedure )
        }



        @{
            string dest = String.Join( ", " , Model.MyRai_Regole_SchedeEccezioni_Destinatari.ValidToday( )
                            .Select( x => x.MyRai_Regole_Destinatari.destinatario ).ToArray( ) );
        }

        @if ( !String.IsNullOrWhiteSpace( dest ) )
        {
            <h3 class="dett-ecc2">DESTINATARI</h3>
            @dest
        }

        @foreach ( var item in campocri )
        {
            <h3 class="dett-ecc2">@(item.chiave != null ? item.chiave.ToUpper( ) : "") </h3>
            @Html.Raw( item.valore )
        }
        @if ( !String.IsNullOrWhiteSpace( Model.criteri_inserimento ) )
        {
            <h3 class="dett-ecc2">CRITERI DI INSERIMENTO</h3>
            @Html.Raw( Model.criteri_inserimento )
        }


        @foreach ( var item in campofon )
        {
            <h3 class="dett-ecc2">@(item.chiave != null ? item.chiave.ToUpper( ) : "") </h3>
            @Html.Raw( item.valore )
        }
        @if ( Model.MyRai_Regole_SchedeEccezioni_Fonti.ValidToday( ).Count( ) > 0 )
        {
            <h3 class="dett-ecc2">FONTI DELLA DISCIPLINA</h3>
            foreach ( var item in Model.MyRai_Regole_SchedeEccezioni_Fonti.ValidToday( ) )
            {
                <a style="text-decoration:underline"
                   @if ( !String.IsNullOrWhiteSpace( item.url ) ) { @: href="@item.url"
                   }
                   target="iflank">@item.descrizione</a><br />
            }
        }




        @foreach ( var item in camponot )
        {
            <h3 class="dett-ecc2">@(item.chiave != null ? item.chiave.ToUpper( ) : "") </h3>
            @Html.Raw( item.valore )
        }
        @if ( !String.IsNullOrWhiteSpace( Model.note ) )
        {
            <h3 class="dett-ecc2">NOTE</h3>
            @Html.Raw( Model.note )
        }





        @foreach ( var item in campoNoPos )
        {
            <h3 class="dett-ecc2">@(item.chiave != null ? item.chiave.ToUpper( ) : "") </h3>
            @Html.Raw( item.valore )
        }

        <br /><br />
        <span style="font-size:90%">Versione N.@Model.versione</span><br />
        <span style="font-size:90%">Ultima modifica @Model.data_inizio_validita.ToString( "dd/MM/yyyy HH.mm" )</span>
    </div>
    <div class="col-sm-4 bg-cel" style="padding-top:40px;padding-left:0px;padding-right:0px">
        <div style="padding-left:16px">
            <span><b>Codice</b></span><br />
            <span>@Model.codice</span><br /><br />

            <span><b>Area Tematica</b></span><br />
            <span>
                @String.Join(", ",Model.MyRai_Regole_SchedeEccezioni_Tematiche.ValidToday()
                                   .Select (x=>x.MyRai_Regole_Tematiche .tematica).ToArray())

            </span><br /><br />

            @if ( Model.MyRai_Regole_TipoAssenza.id != 4 )
            {
                <span><b>Tipo Assenza</b></span><br />
                <span>@Model.MyRai_Regole_TipoAssenza.tipo_assenza</span><br /><br />
            }



            <span><b>Utenti</b></span><br />
            <span>
                @String.Join(", ",Model.MyRai_Regole_SchedeEccezioni_Utenti.ValidToday()
                                   .Select (x=>x.MyRai_Regole_Utenti .utente).ToArray())

            </span><br /><br />

            @if ( Model.MyRai_Regole_TipiDocumentazione.id != 3 )
            {
                <span><b>Tipo Documentazione</b></span><br />
                <span>@Model.MyRai_Regole_TipiDocumentazione.TipoDocumentazione</span><br /><br />
            }


            @if ( !String.IsNullOrWhiteSpace( Model.EccezioniCollegate ) )
            {
                <span><b>Rinvii</b></span><br />
                foreach ( string e in Model.EccezioniCollegate.Split( ',' ) )
                {
                    if ( !String.IsNullOrWhiteSpace( e ) )
                    {
                        <a class="rinvio-ecc" href="javascript:showDettaglioEccezione('@e.Trim()')">@e.Trim( )</a>
                    }
                }
                <br /> <br />

            }
            @foreach ( var item in campoall )
            {
                <span><b>@(item.chiave != null ? item.chiave.ToUpper( ) : "") </b></span><br />
                <span>@Html.Raw( item.valore )</span><br /><br />
            }

        </div>

        <div class="bg-cdf dett-ecc2" style="
            padding-top: 12px;
            padding-bottom: 12px;
            padding-left:16px;
            ">ALLEGATI</div>

        <div style="padding-left:16px;padding-top:20px">

            @foreach ( var alle in Model.MyRai_Regole_Allegati.OrderBy( x => x.progressivo ).ThenBy( x => x.nomefile ).ValidToday( ) )
            {
                <div class="alleg-div">
                    <a target="_blank" href="/schedaeccezioni/getdoc?idAllegato=@alle.id">
                        <i class="icons icon-doc text-primary" style="font-size:130%"></i>
                        @alle.nomefile
                    </a>
                </div>
            }
        </div>



    </div>





</div>

<script>
    function ValidazioneSpecifica() {
        //RKMF
        var codiceOrario = $(".modal-content #timbraturetoday").attr("data-codice-orario");

        if (codiceOrario != "A" && codiceOrario != "A+" && codiceOrario != "A*") {
            ValidazioneErrore("La richiesta è possibile soltanto per turni A o A+ o A*");
            return;
        }
        else
            ValidazioneOK();
    }
    function ValidazioneSpecifica() {
        //RVIV
        var codiceOrario = $(".modal-content #timbraturetoday").attr("data-codice-orario");

        if (codiceOrario != "A" && codiceOrario != "A*") {
            ValidazioneErrore("La richiesta è possibile soltanto per turni A o A+");
            return;
        }
        else
            ValidazioneOK();
    }
    function ValidazioneSpecifica() {
        //MNF
        var codiceOrario = $(".modal-content #timbraturetoday").attr("data-codice-orario");

        if (codiceOrario != "91") {
            ValidazioneErrore("La richiesta è possibile soltanto per codice orario 91");
            return;
        }
        else
            ValidazioneOK();
    }
    function ValidazioneSpecifica() {

        //UMH
        var d = $("#param-dalle").find("input").val();
        var a = $("#param-alle").find("input").val();
        var mindalle = 0;
        var minalle = 0;

        if (d.indexOf("_") < 0 && $.trim(d) != "") {
            var h = Number(d.substring(2, 0));
            var m = Number(d.substring(5, 3));
            mindalle = (h * 60) + m;
        }
        if (a.indexOf("_") < 0 && $.trim(a) != "") {
            var h = Number(d.substring(2, 0));
            var m = Number(d.substring(5, 3));
            minalle = (h * 60) + m;
        }
        if (mindalle == 0 || minalle == 0 || minalle < mindalle) {
            ValidazioneErrore("Parametri non impostati correttamente");
            return;
        }
        var minutiMensa = 0;
        var intervalloMensa = $(".modal-content #timbraturetoday").attr("data-intervallo-mensa");
        if (intervalloMensa.length != 5 || $.trim(intervalloMensa) == "" || intervalloMensa.indexOf(":") < 0) {
            ValidazioneErrore("Parametro intervallo mensa non corretto");
            return;
        }
        else {
            var h = Number(intervalloMensa.substring(2, 0));
            var m = Number(intervalloMensa.substring(5, 3));
            minutiMensa = (h * 60) + m;
        }
        var diffMinuti = minalle - mindalle;
        if (diffMinuti > minutiMensa) {
            ValidazioneErrore("Il periodo richiesto è piu esteso dell\'intervallo mensa");
            return;
        }

        //var m1=$("#giornata-info-attr").attr("data-mensa-pr-from");
        //var m2=$("#giornata-info-attr").attr("data-mensa-pr-to");
        //var m3=$("#giornata-info-attr").attr("data-mensa-se-from");
        //var m4=$("#giornata-info-attr").attr("data-mensa-se-to");
        //if (mindalle >= m1 && mindalle <= m2 && minalle >= m1 && minalle <= m2) {
        //    ValidazioneOK();
        //    return;
        //}
        //if (mindalle >= m3 && mindalle <= m4 && minalle >= m3 && minalle <= m4) {
        //    ValidazioneOK();
        //    return;
        //}

        var m1 = 12 * 60;
        var m2 = (15 * 60) + 15;
        var m3 = 19 * 60;
        var m4 = 21 * 60;

        if ((mindalle >= m1 && mindalle <= m2) || (mindalle >= m3 && mindalle <= m4)) {
            ValidazioneOK();
            return;
        }

        ValidazioneErrore("UMH deve iniziare tra le 1200/1500 o tra le 1900/2100");

    }
    function ValidazioneSpecifica() {

        var i = $("#param-dalle").find("input").val();
        var u = $("#param-alle").find("input").val();

        var next_u = false;
        var next_i = false;

        if (toMinutes(u) > 1440) {
            var mu = toMinutes(u) - 1440;
            u = ConvertiMinutiToHHMM(mu);
            next_u = true;
        }
        if (toMinutes(i) > 1440) {
            var mi = toMinutes(i) - 1440;
            i = ConvertiMinutiToHHMM(mi);
            next_i = true;
        }
        var ingressoMoment = moment($("#data_da").val() + i, "DD/MM/YYYY HH:mm");
        var uscitaMoment = moment($("#data_da").val() + u, "DD/MM/YYYY HH:mm");

        if (next_u)
            uscitaMoment.add(1, 'days');

        if (next_i)
            ingressoMoment.add(1, 'days');

        var duration = moment.duration(uscitaMoment.diff(ingressoMoment));

        if (duration.asMinutes() < 10) {
            ValidazioneErrore("La durata minima è 10 minuti");
            return;
        }
        if (duration.asMinutes() % 5 > 0) {
            ValidazioneErrore("La durata in minuti deve essere un numero multiplo di 5");
            return;
        }


        ValidazioneOK();
    }
    function ValidazioneSpecifica() {

        var i = $("#param-dalle").find("input").val();
        var u = $("#param-alle").find("input").val();
        var h = Number(u.split(':')[0]);
        var nextDay = false;
        if (h > 23) {
            nextDay = true;
            h = h - 24;
            u = "0" + h.toString() + ":" + u.split(':')[1];
        }

        var ingressoMoment = moment($("#data_da").val() + i, "DD/MM/YYYY HH:mm");
        var uscitaMoment = moment($("#data_da").val() + u, "DD/MM/YYYY HH:mm");
        if (nextDay) {
            uscitaMoment = moment(uscitaMoment.add(1, 'days')._d);
        }

        var duration = moment.duration(uscitaMoment.diff(ingressoMoment));

        if (duration.asMinutes() < 10) {
            ValidazioneErrore("La durata minima è 10 minuti");
            return;
        }
        if (duration.asMinutes() % 5 > 0) {
            ValidazioneErrore("La durata in minuti deve essere un numero multiplo di 5");
            return;
        }


        ValidazioneOK();
    }
    function ValidazioneSpecifica() {

        //URH
        debugger
        var d = $("#param-dalle").find("input").val();
        var a = $("#param-alle").find("input").val();
        var mindalle = 0;
        var minalle = 0;

        if (d.indexOf("_") < 0 && $.trim(d) != "") {
            var h = Number(d.substring(2, 0));
            var m = Number(d.substring(5, 3));
            mindalle = (h * 60) + m;
        }
        if (a.indexOf("_") < 0 && $.trim(a) != "") {
            var h = Number(a.substring(2, 0));
            var m = Number(a.substring(5, 3));
            minalle = (h * 60) + m;
        }
        if (mindalle == 0 || minalle == 0 || minalle < mindalle || minalle == mindalle) {
            ValidazioneErrore("Parametri non impostati correttamente");
            return;
        }
        var minutiMensa = 0;
        var intervalloMensa = $(".modal-content #timbraturetoday").attr("data-intervallo-mensa");
        if (intervalloMensa.length != 5 || $.trim(intervalloMensa) == "" || intervalloMensa.indexOf(":") < 0) {
            ValidazioneErrore("Parametro intervallo mensa non corretto");
            return;
        }
        else {
            var h = Number(intervalloMensa.substring(2, 0));
            var m = Number(intervalloMensa.substring(5, 3));
            minutiMensa = (h * 60) + m;
        }
        var diffMinuti = minalle - mindalle;

        var m1 = $("#giornata-info-attr").attr("data-mensa-pr-from");
        var m2 = $("#giornata-info-attr").attr("data-mensa-pr-to");
        var m3 = $("#giornata-info-attr").attr("data-mensa-se-from");
        var m4 = $("#giornata-info-attr").attr("data-mensa-se-to");

        //////////////////////////////////////////////////////
        var mensa_disponibile = $("#giornata-info-attr").attr("data-mensa-disponibile");

        if (mensa_disponibile.indexOf('P') >= 0) //mensa P no URH Pr
        {
            m1 = 0;
            m2 = 0;
        }
        if (mensa_disponibile.indexOf('C') >= 0) //mensa C no URH Ce
        {
            m3 = 0;
            m4 = 0;
        }

        ///////////////////////////////////////////////////////////

        if (mindalle >= m1 && mindalle <= m2 && minalle >= m1 && minalle <= m2) {
            ValidazioneOK();
            return;
        }
        if (mindalle >= m3 && mindalle <= m4 && minalle >= m3 && minalle <= m4) {
            ValidazioneOK();
            return;
        }

        ValidazioneErrore("Gli orari devono essere compresi negli intervalli mensa ");

    }
    function ValidazioneSpecifica() {

        var q = $("#param-quantita").find("input").val();

        var minutes = toMinutes(q);

        if (minutes < 60) {
            ValidazioneErrore("Impostare almeno 60 minuti per SWH");
            return;
        }
        else
            ValidazioneOK();
    }
</script>

