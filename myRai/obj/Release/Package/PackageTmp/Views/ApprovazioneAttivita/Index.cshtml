@using myRaiHelper;
@using myRaiCommonModel;
@using MVCProject.Custom_Helpers;

@model ApprovazioniAttivitaModel

@{
    Layout = "~/Views/Shared/_layout2.cshtml";
    string[] mess = CommonHelper.GetParametri<string>( EnumParametriSistema.MessaggioChiusura );
}

<section class="body">
    @Html.Partial( "../Shared/header2" , new NotifichePopupModel( CommonHelper.GetCurrentUserMatricola( ) ) )
    <div class="inner-wrapper">
        @Html.Partial( "../Shared/sidebar3" , myRaiHelper.UtenteHelper.getSidebarModel(  ) )
        <section role="main" class="content-body">

            <main id="main-container">
                <div class="content">
                    <div class="row">
                        <div class="col-sm-8">
                            @if ( Model.IsPreview )
                            {
                                @Html.Partial( "subpartial/da_approvare_skeleton" )
                            }
                            else
                            {
                                if ( !UtenteHelper.GappChiuso( ) )
                                {
                                    @Html.Partial( "subpartial/da_approvare" , Model )
                                }
                                else
                                {
                                    <div class="alert alert-warning alert-dismissable ">
                                        <h3 class="font-w300 push-15 text-black ">@mess[0]</h3>
                                        <p class="text-black">@mess[1]</p>
                                    </div>
                                }
                            }

                        </div>
                        <div class="col-sm-4">
                            @Html.Partial( "subpartial/ricerca_att" , Model.RicercaModel )
                        </div>
                    </div>
                </div>
            </main>
        </section>
    </div>

    <aside id="sidebar-right" class="sidebar-right">
        <div class="nano has-scrollbar">
            <div class="nano-content" tabindex="0" style="right: -17px;">
            </div>
        </div>
        <div class="nano-pane" style="opacity: 1; visibility: visible;">
            <div class="nano-slider" style="height: 583px; transform: translate(0px, 0px);"></div>
        </div>
    </aside>
</section>

@Html.Partial( "../Richieste/_validarifiutatutti" )
@Html.Partial( "../Responsabile/popupResponsabile" )
@Html.Partial( "../Richieste/_motivoRifiuto" )

<div class="modal fade right" id="giornata-modal" tabindex="-1" role="dialog" aria-hidden="true" style="display: none;">
</div>
<div class="modal fade right" id="doc-modal" tabindex="-1" role="dialog" aria-hidden="true" style="display: none;">
    <div class="modal-dialog modal-dialog-popin modal-lg">
        <div class="block-header bg-cdf" style="height: 0px; padding: 0px;">
            <ul class="block-options visible-xs">
                <li>
                    <button data-dismiss="modal" type="button"><span aria-hidden="true">&times;</span></button>
                </li>
            </ul>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        </div>
        <div class="modal-content" id="pdfcontent" style="text-align: center">
            <iframe style="width: 100%; margin: 8px; border: none" id="docframe"></iframe>
        </div>
    </div>
</div>
@section afterjs
{
    <script>
        $(document).ready(function () {
            var color = "#0088CC";
            if (document.getElementsByClassName("bg-cdf").length) {
                var style = window.getComputedStyle(document.getElementsByClassName("bg-cdf")[0], null);
                if (style.length) {
                    var rgb = style["background-color"];
                    if (rgb.length) {
                        var color = rgb.replace('rgb(', '').replace(')', '').split(',');

                        var r, g, b;
                        r = parseInt(color[0].trim());
                        g = parseInt(color[1].trim());
                        b = parseInt(color[2].trim());

                        color = "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
                    }
                }
            }

            $('.chart').easyPieChart({
                "barColor": color, "delay": 300, scaleColor: false, lineWidth: 7, size: 125
            });
            $('.chart-small').easyPieChart({
                "barColor": color, "delay": 300, scaleColor: false, lineWidth: 4, size: 55
            });
        });
    </script>
}