//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Il codice sorgente è stato generato automaticamente da Microsoft.VSDesigner, versione 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace myRaiServiceHub.firmaDigitale {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="remoteSignaturePortBinding", Namespace="http://impl.ws.firmaremota.itagile.it/")]
    public partial class remoteSignature : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getCertificatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback digestOperationCompleted;
        
        private System.Threading.SendOrPostCallback closeSignatureSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback openSignatureSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback signPDFOperationCompleted;
        
        private System.Threading.SendOrPostCallback signCAdESOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback signP7MOperationCompleted;
        
        private System.Threading.SendOrPostCallback signPDFPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback signXAdESOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserImagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback signPKCS1OperationCompleted;
        
        private System.Threading.SendOrPostCallback addUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback setUserImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback findUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback documentP7mInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback timestampResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback signPKCS1ArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback timestampDetachedOperationCompleted;
        
        private System.Threading.SendOrPostCallback isModuleActiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback changePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsersDirectoryTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback documentXadesInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback verifyCertificateAtTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback verifySignaturesOperationCompleted;
        
        private System.Threading.SendOrPostCallback documentPdfInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback timestampTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback verifyCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback timestampAttachedOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public remoteSignature() {
            this.Url = global::myRaiServiceHub.Properties.Settings.Default.myRaiServiceHub_firmaDigitale_remoteSignature;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getCertificatesCompletedEventHandler getCertificatesCompleted;
        
        /// <remarks/>
        public event digestCompletedEventHandler digestCompleted;
        
        /// <remarks/>
        public event closeSignatureSessionCompletedEventHandler closeSignatureSessionCompleted;
        
        /// <remarks/>
        public event openSignatureSessionCompletedEventHandler openSignatureSessionCompleted;
        
        /// <remarks/>
        public event signPDFCompletedEventHandler signPDFCompleted;
        
        /// <remarks/>
        public event signCAdESCompletedEventHandler signCAdESCompleted;
        
        /// <remarks/>
        public event deleteUserCompletedEventHandler deleteUserCompleted;
        
        /// <remarks/>
        public event signP7MCompletedEventHandler signP7MCompleted;
        
        /// <remarks/>
        public event signPDFPathCompletedEventHandler signPDFPathCompleted;
        
        /// <remarks/>
        public event signXAdESCompletedEventHandler signXAdESCompleted;
        
        /// <remarks/>
        public event getUserImagesCompletedEventHandler getUserImagesCompleted;
        
        /// <remarks/>
        public event signPKCS1CompletedEventHandler signPKCS1Completed;
        
        /// <remarks/>
        public event addUserCompletedEventHandler addUserCompleted;
        
        /// <remarks/>
        public event setUserImageCompletedEventHandler setUserImageCompleted;
        
        /// <remarks/>
        public event findUserCompletedEventHandler findUserCompleted;
        
        /// <remarks/>
        public event documentP7mInfoCompletedEventHandler documentP7mInfoCompleted;
        
        /// <remarks/>
        public event timestampResponseCompletedEventHandler timestampResponseCompleted;
        
        /// <remarks/>
        public event signPKCS1ArrayCompletedEventHandler signPKCS1ArrayCompleted;
        
        /// <remarks/>
        public event timestampDetachedCompletedEventHandler timestampDetachedCompleted;
        
        /// <remarks/>
        public event isModuleActiveCompletedEventHandler isModuleActiveCompleted;
        
        /// <remarks/>
        public event changePasswordCompletedEventHandler changePasswordCompleted;
        
        /// <remarks/>
        public event getUsersDirectoryTypeCompletedEventHandler getUsersDirectoryTypeCompleted;
        
        /// <remarks/>
        public event changeUserPasswordCompletedEventHandler changeUserPasswordCompleted;
        
        /// <remarks/>
        public event documentXadesInfoCompletedEventHandler documentXadesInfoCompleted;
        
        /// <remarks/>
        public event verifyCertificateAtTimeCompletedEventHandler verifyCertificateAtTimeCompleted;
        
        /// <remarks/>
        public event verifySignaturesCompletedEventHandler verifySignaturesCompleted;
        
        /// <remarks/>
        public event documentPdfInfoCompletedEventHandler documentPdfInfoCompleted;
        
        /// <remarks/>
        public event timestampTokenCompletedEventHandler timestampTokenCompleted;
        
        /// <remarks/>
        public event verifyCertificateCompletedEventHandler verifyCertificateCompleted;
        
        /// <remarks/>
        public event timestampAttachedCompletedEventHandler timestampAttachedCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getCertificatesReturn", DataType="base64Binary")]
        public byte[][] getCertificates(RemoteSignatureCredentials cred) {
            object[] results = this.Invoke("getCertificates", new object[] {
                        cred});
            return ((byte[][])(results[0]));
        }
        
        /// <remarks/>
        public void getCertificatesAsync(RemoteSignatureCredentials cred) {
            this.getCertificatesAsync(cred, null);
        }
        
        /// <remarks/>
        public void getCertificatesAsync(RemoteSignatureCredentials cred, object userState) {
            if ((this.getCertificatesOperationCompleted == null)) {
                this.getCertificatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCertificatesOperationCompleted);
            }
            this.InvokeAsync("getCertificates", new object[] {
                        cred}, this.getCertificatesOperationCompleted, userState);
        }
        
        private void OngetCertificatesOperationCompleted(object arg) {
            if ((this.getCertificatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCertificatesCompleted(this, new getCertificatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("digestReturn", DataType="base64Binary")]
        public byte[] digest([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content, string digestAlg) {
            object[] results = this.Invoke("digest", new object[] {
                        content,
                        digestAlg});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void digestAsync(byte[] content, string digestAlg) {
            this.digestAsync(content, digestAlg, null);
        }
        
        /// <remarks/>
        public void digestAsync(byte[] content, string digestAlg, object userState) {
            if ((this.digestOperationCompleted == null)) {
                this.digestOperationCompleted = new System.Threading.SendOrPostCallback(this.OndigestOperationCompleted);
            }
            this.InvokeAsync("digest", new object[] {
                        content,
                        digestAlg}, this.digestOperationCompleted, userState);
        }
        
        private void OndigestOperationCompleted(object arg) {
            if ((this.digestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.digestCompleted(this, new digestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("closeSignatureSessionReturn")]
        public string closeSignatureSession(RemoteSignatureCredentials cred, string sessionToken) {
            object[] results = this.Invoke("closeSignatureSession", new object[] {
                        cred,
                        sessionToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void closeSignatureSessionAsync(RemoteSignatureCredentials cred, string sessionToken) {
            this.closeSignatureSessionAsync(cred, sessionToken, null);
        }
        
        /// <remarks/>
        public void closeSignatureSessionAsync(RemoteSignatureCredentials cred, string sessionToken, object userState) {
            if ((this.closeSignatureSessionOperationCompleted == null)) {
                this.closeSignatureSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseSignatureSessionOperationCompleted);
            }
            this.InvokeAsync("closeSignatureSession", new object[] {
                        cred,
                        sessionToken}, this.closeSignatureSessionOperationCompleted, userState);
        }
        
        private void OncloseSignatureSessionOperationCompleted(object arg) {
            if ((this.closeSignatureSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeSignatureSessionCompleted(this, new closeSignatureSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("openSignatureSessionReturn")]
        public string openSignatureSession(RemoteSignatureCredentials cred) {
            object[] results = this.Invoke("openSignatureSession", new object[] {
                        cred});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void openSignatureSessionAsync(RemoteSignatureCredentials cred) {
            this.openSignatureSessionAsync(cred, null);
        }
        
        /// <remarks/>
        public void openSignatureSessionAsync(RemoteSignatureCredentials cred, object userState) {
            if ((this.openSignatureSessionOperationCompleted == null)) {
                this.openSignatureSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnopenSignatureSessionOperationCompleted);
            }
            this.InvokeAsync("openSignatureSession", new object[] {
                        cred}, this.openSignatureSessionOperationCompleted, userState);
        }
        
        private void OnopenSignatureSessionOperationCompleted(object arg) {
            if ((this.openSignatureSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.openSignatureSessionCompleted(this, new openSignatureSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("signPDFReturn", DataType="base64Binary")]
        public byte[] signPDF(
                    RemoteSignatureCredentials cred, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content, 
                    bool contentInAttachments, 
                    string digestType, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] X509certificate, 
                    SignatureFlags flags, 
                    string fieldName, 
                    int page, 
                    int x, 
                    int y, 
                    int width, 
                    int height, 
                    string userName, 
                    string reason, 
                    string location, 
                    string dateFormat, 
                    string text, 
                    int fontSize) {
            object[] results = this.Invoke("signPDF", new object[] {
                        cred,
                        content,
                        contentInAttachments,
                        digestType,
                        X509certificate,
                        flags,
                        fieldName,
                        page,
                        x,
                        y,
                        width,
                        height,
                        userName,
                        reason,
                        location,
                        dateFormat,
                        text,
                        fontSize});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void signPDFAsync(
                    RemoteSignatureCredentials cred, 
                    byte[] content, 
                    bool contentInAttachments, 
                    string digestType, 
                    byte[] X509certificate, 
                    SignatureFlags flags, 
                    string fieldName, 
                    int page, 
                    int x, 
                    int y, 
                    int width, 
                    int height, 
                    string userName, 
                    string reason, 
                    string location, 
                    string dateFormat, 
                    string text, 
                    int fontSize) {
            this.signPDFAsync(cred, content, contentInAttachments, digestType, X509certificate, flags, fieldName, page, x, y, width, height, userName, reason, location, dateFormat, text, fontSize, null);
        }
        
        /// <remarks/>
        public void signPDFAsync(
                    RemoteSignatureCredentials cred, 
                    byte[] content, 
                    bool contentInAttachments, 
                    string digestType, 
                    byte[] X509certificate, 
                    SignatureFlags flags, 
                    string fieldName, 
                    int page, 
                    int x, 
                    int y, 
                    int width, 
                    int height, 
                    string userName, 
                    string reason, 
                    string location, 
                    string dateFormat, 
                    string text, 
                    int fontSize, 
                    object userState) {
            if ((this.signPDFOperationCompleted == null)) {
                this.signPDFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsignPDFOperationCompleted);
            }
            this.InvokeAsync("signPDF", new object[] {
                        cred,
                        content,
                        contentInAttachments,
                        digestType,
                        X509certificate,
                        flags,
                        fieldName,
                        page,
                        x,
                        y,
                        width,
                        height,
                        userName,
                        reason,
                        location,
                        dateFormat,
                        text,
                        fontSize}, this.signPDFOperationCompleted, userState);
        }
        
        private void OnsignPDFOperationCompleted(object arg) {
            if ((this.signPDFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.signPDFCompleted(this, new signPDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("signCAdESReturn", DataType="base64Binary")]
        public byte[] signCAdES(RemoteSignatureCredentials signatureCred, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content, string digestType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] X509certificate, SignatureFlags flags) {
            object[] results = this.Invoke("signCAdES", new object[] {
                        signatureCred,
                        content,
                        digestType,
                        X509certificate,
                        flags});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void signCAdESAsync(RemoteSignatureCredentials signatureCred, byte[] content, string digestType, byte[] X509certificate, SignatureFlags flags) {
            this.signCAdESAsync(signatureCred, content, digestType, X509certificate, flags, null);
        }
        
        /// <remarks/>
        public void signCAdESAsync(RemoteSignatureCredentials signatureCred, byte[] content, string digestType, byte[] X509certificate, SignatureFlags flags, object userState) {
            if ((this.signCAdESOperationCompleted == null)) {
                this.signCAdESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsignCAdESOperationCompleted);
            }
            this.InvokeAsync("signCAdES", new object[] {
                        signatureCred,
                        content,
                        digestType,
                        X509certificate,
                        flags}, this.signCAdESOperationCompleted, userState);
        }
        
        private void OnsignCAdESOperationCompleted(object arg) {
            if ((this.signCAdESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.signCAdESCompleted(this, new signCAdESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deleteUser(RemoteSignatureCredentials cred, string userid) {
            this.Invoke("deleteUser", new object[] {
                        cred,
                        userid});
        }
        
        /// <remarks/>
        public void deleteUserAsync(RemoteSignatureCredentials cred, string userid) {
            this.deleteUserAsync(cred, userid, null);
        }
        
        /// <remarks/>
        public void deleteUserAsync(RemoteSignatureCredentials cred, string userid, object userState) {
            if ((this.deleteUserOperationCompleted == null)) {
                this.deleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteUserOperationCompleted);
            }
            this.InvokeAsync("deleteUser", new object[] {
                        cred,
                        userid}, this.deleteUserOperationCompleted, userState);
        }
        
        private void OndeleteUserOperationCompleted(object arg) {
            if ((this.deleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("signP7MReturn", DataType="base64Binary")]
        public byte[] signP7M(RemoteSignatureCredentials signatureCred, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content, bool contentInAttachments, bool p7m, string digestType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] X509certificate, SignatureFlags flags) {
            object[] results = this.Invoke("signP7M", new object[] {
                        signatureCred,
                        content,
                        contentInAttachments,
                        p7m,
                        digestType,
                        X509certificate,
                        flags});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void signP7MAsync(RemoteSignatureCredentials signatureCred, byte[] content, bool contentInAttachments, bool p7m, string digestType, byte[] X509certificate, SignatureFlags flags) {
            this.signP7MAsync(signatureCred, content, contentInAttachments, p7m, digestType, X509certificate, flags, null);
        }
        
        /// <remarks/>
        public void signP7MAsync(RemoteSignatureCredentials signatureCred, byte[] content, bool contentInAttachments, bool p7m, string digestType, byte[] X509certificate, SignatureFlags flags, object userState) {
            if ((this.signP7MOperationCompleted == null)) {
                this.signP7MOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsignP7MOperationCompleted);
            }
            this.InvokeAsync("signP7M", new object[] {
                        signatureCred,
                        content,
                        contentInAttachments,
                        p7m,
                        digestType,
                        X509certificate,
                        flags}, this.signP7MOperationCompleted, userState);
        }
        
        private void OnsignP7MOperationCompleted(object arg) {
            if ((this.signP7MCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.signP7MCompleted(this, new signP7MCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("signPDFPathReturn")]
        public int signPDFPath(
                    string userid, 
                    string password, 
                    string pinToSign, 
                    string domain, 
                    string dirSource, 
                    string dirDest, 
                    string fieldName, 
                    int page, 
                    int x, 
                    int y, 
                    int width, 
                    int height, 
                    string userName, 
                    string reason, 
                    string location, 
                    string dateFormat, 
                    bool graphic, 
                    string text, 
                    int fontSize) {
            object[] results = this.Invoke("signPDFPath", new object[] {
                        userid,
                        password,
                        pinToSign,
                        domain,
                        dirSource,
                        dirDest,
                        fieldName,
                        page,
                        x,
                        y,
                        width,
                        height,
                        userName,
                        reason,
                        location,
                        dateFormat,
                        graphic,
                        text,
                        fontSize});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void signPDFPathAsync(
                    string userid, 
                    string password, 
                    string pinToSign, 
                    string domain, 
                    string dirSource, 
                    string dirDest, 
                    string fieldName, 
                    int page, 
                    int x, 
                    int y, 
                    int width, 
                    int height, 
                    string userName, 
                    string reason, 
                    string location, 
                    string dateFormat, 
                    bool graphic, 
                    string text, 
                    int fontSize) {
            this.signPDFPathAsync(userid, password, pinToSign, domain, dirSource, dirDest, fieldName, page, x, y, width, height, userName, reason, location, dateFormat, graphic, text, fontSize, null);
        }
        
        /// <remarks/>
        public void signPDFPathAsync(
                    string userid, 
                    string password, 
                    string pinToSign, 
                    string domain, 
                    string dirSource, 
                    string dirDest, 
                    string fieldName, 
                    int page, 
                    int x, 
                    int y, 
                    int width, 
                    int height, 
                    string userName, 
                    string reason, 
                    string location, 
                    string dateFormat, 
                    bool graphic, 
                    string text, 
                    int fontSize, 
                    object userState) {
            if ((this.signPDFPathOperationCompleted == null)) {
                this.signPDFPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsignPDFPathOperationCompleted);
            }
            this.InvokeAsync("signPDFPath", new object[] {
                        userid,
                        password,
                        pinToSign,
                        domain,
                        dirSource,
                        dirDest,
                        fieldName,
                        page,
                        x,
                        y,
                        width,
                        height,
                        userName,
                        reason,
                        location,
                        dateFormat,
                        graphic,
                        text,
                        fontSize}, this.signPDFPathOperationCompleted, userState);
        }
        
        private void OnsignPDFPathOperationCompleted(object arg) {
            if ((this.signPDFPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.signPDFPathCompleted(this, new signPDFPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("signXAdESReturn", DataType="base64Binary")]
        public byte[] signXAdES(RemoteSignatureCredentials cred, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content, string digestType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] certificate, RemoteSignatureXadesParams @params) {
            object[] results = this.Invoke("signXAdES", new object[] {
                        cred,
                        content,
                        digestType,
                        certificate,
                        @params});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void signXAdESAsync(RemoteSignatureCredentials cred, byte[] content, string digestType, byte[] certificate, RemoteSignatureXadesParams @params) {
            this.signXAdESAsync(cred, content, digestType, certificate, @params, null);
        }
        
        /// <remarks/>
        public void signXAdESAsync(RemoteSignatureCredentials cred, byte[] content, string digestType, byte[] certificate, RemoteSignatureXadesParams @params, object userState) {
            if ((this.signXAdESOperationCompleted == null)) {
                this.signXAdESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsignXAdESOperationCompleted);
            }
            this.InvokeAsync("signXAdES", new object[] {
                        cred,
                        content,
                        digestType,
                        certificate,
                        @params}, this.signXAdESOperationCompleted, userState);
        }
        
        private void OnsignXAdESOperationCompleted(object arg) {
            if ((this.signXAdESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.signXAdESCompleted(this, new signXAdESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getUserImagesReturn")]
        public SignatureImage[] getUserImages(RemoteSignatureCredentials cred) {
            object[] results = this.Invoke("getUserImages", new object[] {
                        cred});
            return ((SignatureImage[])(results[0]));
        }
        
        /// <remarks/>
        public void getUserImagesAsync(RemoteSignatureCredentials cred) {
            this.getUserImagesAsync(cred, null);
        }
        
        /// <remarks/>
        public void getUserImagesAsync(RemoteSignatureCredentials cred, object userState) {
            if ((this.getUserImagesOperationCompleted == null)) {
                this.getUserImagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserImagesOperationCompleted);
            }
            this.InvokeAsync("getUserImages", new object[] {
                        cred}, this.getUserImagesOperationCompleted, userState);
        }
        
        private void OngetUserImagesOperationCompleted(object arg) {
            if ((this.getUserImagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserImagesCompleted(this, new getUserImagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("signPKCS1Return", DataType="base64Binary")]
        public byte[] signPKCS1(RemoteSignatureCredentials cred, [System.Xml.Serialization.XmlElementAttribute("digest", DataType="base64Binary")] byte[] digest1, string digestType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] X509certificate) {
            object[] results = this.Invoke("signPKCS1", new object[] {
                        cred,
                        digest1,
                        digestType,
                        X509certificate});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void signPKCS1Async(RemoteSignatureCredentials cred, byte[] digest1, string digestType, byte[] X509certificate) {
            this.signPKCS1Async(cred, digest1, digestType, X509certificate, null);
        }
        
        /// <remarks/>
        public void signPKCS1Async(RemoteSignatureCredentials cred, byte[] digest1, string digestType, byte[] X509certificate, object userState) {
            if ((this.signPKCS1OperationCompleted == null)) {
                this.signPKCS1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnsignPKCS1OperationCompleted);
            }
            this.InvokeAsync("signPKCS1", new object[] {
                        cred,
                        digest1,
                        digestType,
                        X509certificate}, this.signPKCS1OperationCompleted, userState);
        }
        
        private void OnsignPKCS1OperationCompleted(object arg) {
            if ((this.signPKCS1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.signPKCS1Completed(this, new signPKCS1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addUser(RemoteSignatureCredentials cred, string userid, string password, string commonName, string email, bool hsmManager, bool userManager) {
            this.Invoke("addUser", new object[] {
                        cred,
                        userid,
                        password,
                        commonName,
                        email,
                        hsmManager,
                        userManager});
        }
        
        /// <remarks/>
        public void addUserAsync(RemoteSignatureCredentials cred, string userid, string password, string commonName, string email, bool hsmManager, bool userManager) {
            this.addUserAsync(cred, userid, password, commonName, email, hsmManager, userManager, null);
        }
        
        /// <remarks/>
        public void addUserAsync(RemoteSignatureCredentials cred, string userid, string password, string commonName, string email, bool hsmManager, bool userManager, object userState) {
            if ((this.addUserOperationCompleted == null)) {
                this.addUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUserOperationCompleted);
            }
            this.InvokeAsync("addUser", new object[] {
                        cred,
                        userid,
                        password,
                        commonName,
                        email,
                        hsmManager,
                        userManager}, this.addUserOperationCompleted, userState);
        }
        
        private void OnaddUserOperationCompleted(object arg) {
            if ((this.addUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setUserImage(RemoteSignatureCredentials cred, SignatureImage userImage) {
            this.Invoke("setUserImage", new object[] {
                        cred,
                        userImage});
        }
        
        /// <remarks/>
        public void setUserImageAsync(RemoteSignatureCredentials cred, SignatureImage userImage) {
            this.setUserImageAsync(cred, userImage, null);
        }
        
        /// <remarks/>
        public void setUserImageAsync(RemoteSignatureCredentials cred, SignatureImage userImage, object userState) {
            if ((this.setUserImageOperationCompleted == null)) {
                this.setUserImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetUserImageOperationCompleted);
            }
            this.InvokeAsync("setUserImage", new object[] {
                        cred,
                        userImage}, this.setUserImageOperationCompleted, userState);
        }
        
        private void OnsetUserImageOperationCompleted(object arg) {
            if ((this.setUserImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setUserImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("findUserReturn")]
        public UserInfo findUser(RemoteSignatureCredentials cred, string userid) {
            object[] results = this.Invoke("findUser", new object[] {
                        cred,
                        userid});
            return ((UserInfo)(results[0]));
        }
        
        /// <remarks/>
        public void findUserAsync(RemoteSignatureCredentials cred, string userid) {
            this.findUserAsync(cred, userid, null);
        }
        
        /// <remarks/>
        public void findUserAsync(RemoteSignatureCredentials cred, string userid, object userState) {
            if ((this.findUserOperationCompleted == null)) {
                this.findUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindUserOperationCompleted);
            }
            this.InvokeAsync("findUser", new object[] {
                        cred,
                        userid}, this.findUserOperationCompleted, userState);
        }
        
        private void OnfindUserOperationCompleted(object arg) {
            if ((this.findUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findUserCompleted(this, new findUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("documentP7mInfoReturn")]
        public SignatureDocumentInfo documentP7mInfo([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] signedDocument, bool verifySignatures, bool extractContent, bool extractOriginal, bool extractX509) {
            object[] results = this.Invoke("documentP7mInfo", new object[] {
                        signedDocument,
                        verifySignatures,
                        extractContent,
                        extractOriginal,
                        extractX509});
            return ((SignatureDocumentInfo)(results[0]));
        }
        
        /// <remarks/>
        public void documentP7mInfoAsync(byte[] signedDocument, bool verifySignatures, bool extractContent, bool extractOriginal, bool extractX509) {
            this.documentP7mInfoAsync(signedDocument, verifySignatures, extractContent, extractOriginal, extractX509, null);
        }
        
        /// <remarks/>
        public void documentP7mInfoAsync(byte[] signedDocument, bool verifySignatures, bool extractContent, bool extractOriginal, bool extractX509, object userState) {
            if ((this.documentP7mInfoOperationCompleted == null)) {
                this.documentP7mInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OndocumentP7mInfoOperationCompleted);
            }
            this.InvokeAsync("documentP7mInfo", new object[] {
                        signedDocument,
                        verifySignatures,
                        extractContent,
                        extractOriginal,
                        extractX509}, this.documentP7mInfoOperationCompleted, userState);
        }
        
        private void OndocumentP7mInfoOperationCompleted(object arg) {
            if ((this.documentP7mInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.documentP7mInfoCompleted(this, new documentP7mInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("timestampResponseReturn", DataType="base64Binary")]
        public byte[] timestampResponse(RemoteSignatureCredentials cred, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] timeStampRequest) {
            object[] results = this.Invoke("timestampResponse", new object[] {
                        cred,
                        timeStampRequest});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void timestampResponseAsync(RemoteSignatureCredentials cred, byte[] timeStampRequest) {
            this.timestampResponseAsync(cred, timeStampRequest, null);
        }
        
        /// <remarks/>
        public void timestampResponseAsync(RemoteSignatureCredentials cred, byte[] timeStampRequest, object userState) {
            if ((this.timestampResponseOperationCompleted == null)) {
                this.timestampResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OntimestampResponseOperationCompleted);
            }
            this.InvokeAsync("timestampResponse", new object[] {
                        cred,
                        timeStampRequest}, this.timestampResponseOperationCompleted, userState);
        }
        
        private void OntimestampResponseOperationCompleted(object arg) {
            if ((this.timestampResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.timestampResponseCompleted(this, new timestampResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("signPKCS1ArrayReturn", DataType="base64Binary")]
        public byte[][] signPKCS1Array(RemoteSignatureCredentials cred, [System.Xml.Serialization.XmlElementAttribute("digest", DataType="base64Binary")] byte[][] digest1, string digestType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] X509certificate) {
            object[] results = this.Invoke("signPKCS1Array", new object[] {
                        cred,
                        digest1,
                        digestType,
                        X509certificate});
            return ((byte[][])(results[0]));
        }
        
        /// <remarks/>
        public void signPKCS1ArrayAsync(RemoteSignatureCredentials cred, byte[][] digest1, string digestType, byte[] X509certificate) {
            this.signPKCS1ArrayAsync(cred, digest1, digestType, X509certificate, null);
        }
        
        /// <remarks/>
        public void signPKCS1ArrayAsync(RemoteSignatureCredentials cred, byte[][] digest1, string digestType, byte[] X509certificate, object userState) {
            if ((this.signPKCS1ArrayOperationCompleted == null)) {
                this.signPKCS1ArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsignPKCS1ArrayOperationCompleted);
            }
            this.InvokeAsync("signPKCS1Array", new object[] {
                        cred,
                        digest1,
                        digestType,
                        X509certificate}, this.signPKCS1ArrayOperationCompleted, userState);
        }
        
        private void OnsignPKCS1ArrayOperationCompleted(object arg) {
            if ((this.signPKCS1ArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.signPKCS1ArrayCompleted(this, new signPKCS1ArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("timestampDetachedReturn", DataType="base64Binary")]
        public byte[] timestampDetached(RemoteSignatureCredentials cred, [System.Xml.Serialization.XmlElementAttribute("digest", DataType="base64Binary")] byte[] digest1, string digestAlg) {
            object[] results = this.Invoke("timestampDetached", new object[] {
                        cred,
                        digest1,
                        digestAlg});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void timestampDetachedAsync(RemoteSignatureCredentials cred, byte[] digest1, string digestAlg) {
            this.timestampDetachedAsync(cred, digest1, digestAlg, null);
        }
        
        /// <remarks/>
        public void timestampDetachedAsync(RemoteSignatureCredentials cred, byte[] digest1, string digestAlg, object userState) {
            if ((this.timestampDetachedOperationCompleted == null)) {
                this.timestampDetachedOperationCompleted = new System.Threading.SendOrPostCallback(this.OntimestampDetachedOperationCompleted);
            }
            this.InvokeAsync("timestampDetached", new object[] {
                        cred,
                        digest1,
                        digestAlg}, this.timestampDetachedOperationCompleted, userState);
        }
        
        private void OntimestampDetachedOperationCompleted(object arg) {
            if ((this.timestampDetachedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.timestampDetachedCompleted(this, new timestampDetachedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("isModuleActiveReturn")]
        public bool isModuleActive(string moduleName) {
            object[] results = this.Invoke("isModuleActive", new object[] {
                        moduleName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isModuleActiveAsync(string moduleName) {
            this.isModuleActiveAsync(moduleName, null);
        }
        
        /// <remarks/>
        public void isModuleActiveAsync(string moduleName, object userState) {
            if ((this.isModuleActiveOperationCompleted == null)) {
                this.isModuleActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisModuleActiveOperationCompleted);
            }
            this.InvokeAsync("isModuleActive", new object[] {
                        moduleName}, this.isModuleActiveOperationCompleted, userState);
        }
        
        private void OnisModuleActiveOperationCompleted(object arg) {
            if ((this.isModuleActiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isModuleActiveCompleted(this, new isModuleActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void changePassword(RemoteSignatureCredentials cred, string newPassword) {
            this.Invoke("changePassword", new object[] {
                        cred,
                        newPassword});
        }
        
        /// <remarks/>
        public void changePasswordAsync(RemoteSignatureCredentials cred, string newPassword) {
            this.changePasswordAsync(cred, newPassword, null);
        }
        
        /// <remarks/>
        public void changePasswordAsync(RemoteSignatureCredentials cred, string newPassword, object userState) {
            if ((this.changePasswordOperationCompleted == null)) {
                this.changePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangePasswordOperationCompleted);
            }
            this.InvokeAsync("changePassword", new object[] {
                        cred,
                        newPassword}, this.changePasswordOperationCompleted, userState);
        }
        
        private void OnchangePasswordOperationCompleted(object arg) {
            if ((this.changePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changePasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getUsersDirectoryTypeReturn")]
        public string getUsersDirectoryType() {
            object[] results = this.Invoke("getUsersDirectoryType", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUsersDirectoryTypeAsync() {
            this.getUsersDirectoryTypeAsync(null);
        }
        
        /// <remarks/>
        public void getUsersDirectoryTypeAsync(object userState) {
            if ((this.getUsersDirectoryTypeOperationCompleted == null)) {
                this.getUsersDirectoryTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsersDirectoryTypeOperationCompleted);
            }
            this.InvokeAsync("getUsersDirectoryType", new object[0], this.getUsersDirectoryTypeOperationCompleted, userState);
        }
        
        private void OngetUsersDirectoryTypeOperationCompleted(object arg) {
            if ((this.getUsersDirectoryTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsersDirectoryTypeCompleted(this, new getUsersDirectoryTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void changeUserPassword(RemoteSignatureCredentials cred, string userid, string newPassword) {
            this.Invoke("changeUserPassword", new object[] {
                        cred,
                        userid,
                        newPassword});
        }
        
        /// <remarks/>
        public void changeUserPasswordAsync(RemoteSignatureCredentials cred, string userid, string newPassword) {
            this.changeUserPasswordAsync(cred, userid, newPassword, null);
        }
        
        /// <remarks/>
        public void changeUserPasswordAsync(RemoteSignatureCredentials cred, string userid, string newPassword, object userState) {
            if ((this.changeUserPasswordOperationCompleted == null)) {
                this.changeUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeUserPasswordOperationCompleted);
            }
            this.InvokeAsync("changeUserPassword", new object[] {
                        cred,
                        userid,
                        newPassword}, this.changeUserPasswordOperationCompleted, userState);
        }
        
        private void OnchangeUserPasswordOperationCompleted(object arg) {
            if ((this.changeUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeUserPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("documentXadesInfoReturn")]
        public SignatureDocumentInfo documentXadesInfo([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] signedDocument, bool verifySignatures, bool extractContent, bool extractX509) {
            object[] results = this.Invoke("documentXadesInfo", new object[] {
                        signedDocument,
                        verifySignatures,
                        extractContent,
                        extractX509});
            return ((SignatureDocumentInfo)(results[0]));
        }
        
        /// <remarks/>
        public void documentXadesInfoAsync(byte[] signedDocument, bool verifySignatures, bool extractContent, bool extractX509) {
            this.documentXadesInfoAsync(signedDocument, verifySignatures, extractContent, extractX509, null);
        }
        
        /// <remarks/>
        public void documentXadesInfoAsync(byte[] signedDocument, bool verifySignatures, bool extractContent, bool extractX509, object userState) {
            if ((this.documentXadesInfoOperationCompleted == null)) {
                this.documentXadesInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OndocumentXadesInfoOperationCompleted);
            }
            this.InvokeAsync("documentXadesInfo", new object[] {
                        signedDocument,
                        verifySignatures,
                        extractContent,
                        extractX509}, this.documentXadesInfoOperationCompleted, userState);
        }
        
        private void OndocumentXadesInfoOperationCompleted(object arg) {
            if ((this.documentXadesInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.documentXadesInfoCompleted(this, new documentXadesInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("verifyCertificateAtTimeReturn")]
        public CertificateStatus verifyCertificateAtTime([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] certBuf, System.DateTime checkTime) {
            object[] results = this.Invoke("verifyCertificateAtTime", new object[] {
                        certBuf,
                        checkTime});
            return ((CertificateStatus)(results[0]));
        }
        
        /// <remarks/>
        public void verifyCertificateAtTimeAsync(byte[] certBuf, System.DateTime checkTime) {
            this.verifyCertificateAtTimeAsync(certBuf, checkTime, null);
        }
        
        /// <remarks/>
        public void verifyCertificateAtTimeAsync(byte[] certBuf, System.DateTime checkTime, object userState) {
            if ((this.verifyCertificateAtTimeOperationCompleted == null)) {
                this.verifyCertificateAtTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnverifyCertificateAtTimeOperationCompleted);
            }
            this.InvokeAsync("verifyCertificateAtTime", new object[] {
                        certBuf,
                        checkTime}, this.verifyCertificateAtTimeOperationCompleted, userState);
        }
        
        private void OnverifyCertificateAtTimeOperationCompleted(object arg) {
            if ((this.verifyCertificateAtTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.verifyCertificateAtTimeCompleted(this, new verifyCertificateAtTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("verifySignaturesReturn")]
        public SignatureStatus[] verifySignatures([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] signedDocument, bool docsInAttachment, string mimeType) {
            object[] results = this.Invoke("verifySignatures", new object[] {
                        signedDocument,
                        docsInAttachment,
                        mimeType});
            return ((SignatureStatus[])(results[0]));
        }
        
        /// <remarks/>
        public void verifySignaturesAsync(byte[] signedDocument, bool docsInAttachment, string mimeType) {
            this.verifySignaturesAsync(signedDocument, docsInAttachment, mimeType, null);
        }
        
        /// <remarks/>
        public void verifySignaturesAsync(byte[] signedDocument, bool docsInAttachment, string mimeType, object userState) {
            if ((this.verifySignaturesOperationCompleted == null)) {
                this.verifySignaturesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnverifySignaturesOperationCompleted);
            }
            this.InvokeAsync("verifySignatures", new object[] {
                        signedDocument,
                        docsInAttachment,
                        mimeType}, this.verifySignaturesOperationCompleted, userState);
        }
        
        private void OnverifySignaturesOperationCompleted(object arg) {
            if ((this.verifySignaturesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.verifySignaturesCompleted(this, new verifySignaturesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("documentPdfInfoReturn")]
        public SignatureDocumentInfo documentPdfInfo([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] signedDocument, [System.Xml.Serialization.XmlElementAttribute("verifySignatures")] bool verifySignatures1, bool extractFields, bool extractX509) {
            object[] results = this.Invoke("documentPdfInfo", new object[] {
                        signedDocument,
                        verifySignatures1,
                        extractFields,
                        extractX509});
            return ((SignatureDocumentInfo)(results[0]));
        }
        
        /// <remarks/>
        public void documentPdfInfoAsync(byte[] signedDocument, bool verifySignatures1, bool extractFields, bool extractX509) {
            this.documentPdfInfoAsync(signedDocument, verifySignatures1, extractFields, extractX509, null);
        }
        
        /// <remarks/>
        public void documentPdfInfoAsync(byte[] signedDocument, bool verifySignatures1, bool extractFields, bool extractX509, object userState) {
            if ((this.documentPdfInfoOperationCompleted == null)) {
                this.documentPdfInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OndocumentPdfInfoOperationCompleted);
            }
            this.InvokeAsync("documentPdfInfo", new object[] {
                        signedDocument,
                        verifySignatures1,
                        extractFields,
                        extractX509}, this.documentPdfInfoOperationCompleted, userState);
        }
        
        private void OndocumentPdfInfoOperationCompleted(object arg) {
            if ((this.documentPdfInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.documentPdfInfoCompleted(this, new documentPdfInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("timestampTokenReturn", DataType="base64Binary")]
        public byte[] timestampToken(RemoteSignatureCredentials cred, [System.Xml.Serialization.XmlElementAttribute("digest", DataType="base64Binary")] byte[] digest1, string digestAlg) {
            object[] results = this.Invoke("timestampToken", new object[] {
                        cred,
                        digest1,
                        digestAlg});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void timestampTokenAsync(RemoteSignatureCredentials cred, byte[] digest1, string digestAlg) {
            this.timestampTokenAsync(cred, digest1, digestAlg, null);
        }
        
        /// <remarks/>
        public void timestampTokenAsync(RemoteSignatureCredentials cred, byte[] digest1, string digestAlg, object userState) {
            if ((this.timestampTokenOperationCompleted == null)) {
                this.timestampTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OntimestampTokenOperationCompleted);
            }
            this.InvokeAsync("timestampToken", new object[] {
                        cred,
                        digest1,
                        digestAlg}, this.timestampTokenOperationCompleted, userState);
        }
        
        private void OntimestampTokenOperationCompleted(object arg) {
            if ((this.timestampTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.timestampTokenCompleted(this, new timestampTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("verifyCertificateReturn")]
        public CertificateStatus[] verifyCertificate([System.Xml.Serialization.XmlElementAttribute("X509Cert", DataType="base64Binary")] byte[][] X509Cert) {
            object[] results = this.Invoke("verifyCertificate", new object[] {
                        X509Cert});
            return ((CertificateStatus[])(results[0]));
        }
        
        /// <remarks/>
        public void verifyCertificateAsync(byte[][] X509Cert) {
            this.verifyCertificateAsync(X509Cert, null);
        }
        
        /// <remarks/>
        public void verifyCertificateAsync(byte[][] X509Cert, object userState) {
            if ((this.verifyCertificateOperationCompleted == null)) {
                this.verifyCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnverifyCertificateOperationCompleted);
            }
            this.InvokeAsync("verifyCertificate", new object[] {
                        X509Cert}, this.verifyCertificateOperationCompleted, userState);
        }
        
        private void OnverifyCertificateOperationCompleted(object arg) {
            if ((this.verifyCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.verifyCertificateCompleted(this, new verifyCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.firmaremota.itagile.it", ResponseNamespace="http://ws.firmaremota.itagile.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("timestampAttachedReturn", DataType="base64Binary")]
        public byte[] timestampAttached(RemoteSignatureCredentials cred, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content, bool contentInAttachment, string digestAlg) {
            object[] results = this.Invoke("timestampAttached", new object[] {
                        cred,
                        content,
                        contentInAttachment,
                        digestAlg});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void timestampAttachedAsync(RemoteSignatureCredentials cred, byte[] content, bool contentInAttachment, string digestAlg) {
            this.timestampAttachedAsync(cred, content, contentInAttachment, digestAlg, null);
        }
        
        /// <remarks/>
        public void timestampAttachedAsync(RemoteSignatureCredentials cred, byte[] content, bool contentInAttachment, string digestAlg, object userState) {
            if ((this.timestampAttachedOperationCompleted == null)) {
                this.timestampAttachedOperationCompleted = new System.Threading.SendOrPostCallback(this.OntimestampAttachedOperationCompleted);
            }
            this.InvokeAsync("timestampAttached", new object[] {
                        cred,
                        content,
                        contentInAttachment,
                        digestAlg}, this.timestampAttachedOperationCompleted, userState);
        }
        
        private void OntimestampAttachedOperationCompleted(object arg) {
            if ((this.timestampAttachedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.timestampAttachedCompleted(this, new timestampAttachedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.firmaremota.itagile.it")]
    public partial class RemoteSignatureCredentials {
        
        private ClientCertificateAuth clientCertificateAuthField;
        
        private string extAuthField;
        
        private string passwordField;
        
        private string useridField;
        
        private bool oneshotField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ClientCertificateAuth clientCertificateAuth {
            get {
                return this.clientCertificateAuthField;
            }
            set {
                this.clientCertificateAuthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string extAuth {
            get {
                return this.extAuthField;
            }
            set {
                this.extAuthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string userid {
            get {
                return this.useridField;
            }
            set {
                this.useridField = value;
            }
        }
        
        /// <remarks/>
        public bool oneshot {
            get {
                return this.oneshotField;
            }
            set {
                this.oneshotField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.firmaremota.itagile.it")]
    public partial class ClientCertificateAuth {
        
        private byte[] certificateField;
        
        private byte[] signatureField;
        
        private byte[] timestampField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] certificate {
            get {
                return this.certificateField;
            }
            set {
                this.certificateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] signature {
            get {
                return this.signatureField;
            }
            set {
                this.signatureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.firmaremota.itagile.it")]
    public partial class SignatureStatus {
        
        private CertificateStatus certStatusField;
        
        private SignatureStatus[] counterSignaturesField;
        
        private string digestAlgorithmField;
        
        private string encryptionAlgorithmField;
        
        private string invalidSignatureMessageField;
        
        private string invalidTimestampMessageField;
        
        private string localityField;
        
        private string reasonField;
        
        private string fieldNameField;
        
        private long signatureTimeField;
        
        private bool timestampField;
        
        private byte[] timestampCertificateField;
        
        private bool validSignatureField;
        
        private bool validTimestampField;
        
        private string[] invalidSignatureCodeField;
        
        private string[] invalidTimestampCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public CertificateStatus certStatus {
            get {
                return this.certStatusField;
            }
            set {
                this.certStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item")]
        public SignatureStatus[] counterSignatures {
            get {
                return this.counterSignaturesField;
            }
            set {
                this.counterSignaturesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string digestAlgorithm {
            get {
                return this.digestAlgorithmField;
            }
            set {
                this.digestAlgorithmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string encryptionAlgorithm {
            get {
                return this.encryptionAlgorithmField;
            }
            set {
                this.encryptionAlgorithmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string invalidSignatureMessage {
            get {
                return this.invalidSignatureMessageField;
            }
            set {
                this.invalidSignatureMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string invalidTimestampMessage {
            get {
                return this.invalidTimestampMessageField;
            }
            set {
                this.invalidTimestampMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string locality {
            get {
                return this.localityField;
            }
            set {
                this.localityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string reason {
            get {
                return this.reasonField;
            }
            set {
                this.reasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fieldName {
            get {
                return this.fieldNameField;
            }
            set {
                this.fieldNameField = value;
            }
        }
        
        /// <remarks/>
        public long signatureTime {
            get {
                return this.signatureTimeField;
            }
            set {
                this.signatureTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] timestampCertificate {
            get {
                return this.timestampCertificateField;
            }
            set {
                this.timestampCertificateField = value;
            }
        }
        
        /// <remarks/>
        public bool validSignature {
            get {
                return this.validSignatureField;
            }
            set {
                this.validSignatureField = value;
            }
        }
        
        /// <remarks/>
        public bool validTimestamp {
            get {
                return this.validTimestampField;
            }
            set {
                this.validTimestampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item")]
        public string[] invalidSignatureCode {
            get {
                return this.invalidSignatureCodeField;
            }
            set {
                this.invalidSignatureCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item")]
        public string[] invalidTimestampCode {
            get {
                return this.invalidTimestampCodeField;
            }
            set {
                this.invalidTimestampCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.firmaremota.itagile.it")]
    public partial class CertificateStatus {
        
        private byte[] certificateField;
        
        private long checkTimeField;
        
        private string invalidCertificateMessageField;
        
        private string invalidCertificateCodeField;
        
        private bool trustedIdentityField;
        
        private string untrustedIdentityMessageField;
        
        private string untrustedIdentityCodeField;
        
        private bool validCertificateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] certificate {
            get {
                return this.certificateField;
            }
            set {
                this.certificateField = value;
            }
        }
        
        /// <remarks/>
        public long checkTime {
            get {
                return this.checkTimeField;
            }
            set {
                this.checkTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string invalidCertificateMessage {
            get {
                return this.invalidCertificateMessageField;
            }
            set {
                this.invalidCertificateMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string invalidCertificateCode {
            get {
                return this.invalidCertificateCodeField;
            }
            set {
                this.invalidCertificateCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool trustedIdentity {
            get {
                return this.trustedIdentityField;
            }
            set {
                this.trustedIdentityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string untrustedIdentityMessage {
            get {
                return this.untrustedIdentityMessageField;
            }
            set {
                this.untrustedIdentityMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string untrustedIdentityCode {
            get {
                return this.untrustedIdentityCodeField;
            }
            set {
                this.untrustedIdentityCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool validCertificate {
            get {
                return this.validCertificateField;
            }
            set {
                this.validCertificateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.firmaremota.itagile.it")]
    public partial class SignatureField {
        
        private string nameField;
        
        private System.Nullable<bool> signedField;
        
        private System.Nullable<int> pageField;
        
        private int[] positionField;
        
        private System.Nullable<int> pageHField;
        
        private System.Nullable<bool> visibleField;
        
        private string signerField;
        
        private string locationField;
        
        private string reasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> signed {
            get {
                return this.signedField;
            }
            set {
                this.signedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> page {
            get {
                return this.pageField;
            }
            set {
                this.pageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public int[] position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> pageH {
            get {
                return this.pageHField;
            }
            set {
                this.pageHField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> visible {
            get {
                return this.visibleField;
            }
            set {
                this.visibleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string signer {
            get {
                return this.signerField;
            }
            set {
                this.signerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string reason {
            get {
                return this.reasonField;
            }
            set {
                this.reasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.firmaremota.itagile.it")]
    public partial class Signature {
        
        private string signTypeField;
        
        private string digestAlgField;
        
        private System.Nullable<long> signTimeField;
        
        private string givenNameField;
        
        private string surNameField;
        
        private string fiscalCodeField;
        
        private string organizationField;
        
        private string orgUnitField;
        
        private string certIDField;
        
        private string certTypeField;
        
        private string certSerialField;
        
        private string certKeyUsageField;
        
        private string trustSpField;
        
        private System.Nullable<long> certDateFromField;
        
        private System.Nullable<long> certDateToField;
        
        private System.Nullable<bool> timestampField;
        
        private string tsAuthorityField;
        
        private System.Nullable<long> tsLenghtField;
        
        private SignatureField signatureFieldField;
        
        private System.Nullable<bool> validField;
        
        private System.Nullable<bool> validSignField;
        
        private System.Nullable<bool> validCertField;
        
        private System.Nullable<bool> validTrustField;
        
        private System.Nullable<bool> validTimestampField;
        
        private string signErrCodeField;
        
        private string certErrCodeField;
        
        private string trustErrCodeField;
        
        private System.Nullable<int> p7mLevelField;
        
        private string p7mPathField;
        
        private byte[] x509Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string signType {
            get {
                return this.signTypeField;
            }
            set {
                this.signTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string digestAlg {
            get {
                return this.digestAlgField;
            }
            set {
                this.digestAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> signTime {
            get {
                return this.signTimeField;
            }
            set {
                this.signTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string givenName {
            get {
                return this.givenNameField;
            }
            set {
                this.givenNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string surName {
            get {
                return this.surNameField;
            }
            set {
                this.surNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fiscalCode {
            get {
                return this.fiscalCodeField;
            }
            set {
                this.fiscalCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string organization {
            get {
                return this.organizationField;
            }
            set {
                this.organizationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string orgUnit {
            get {
                return this.orgUnitField;
            }
            set {
                this.orgUnitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string certID {
            get {
                return this.certIDField;
            }
            set {
                this.certIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string certType {
            get {
                return this.certTypeField;
            }
            set {
                this.certTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string certSerial {
            get {
                return this.certSerialField;
            }
            set {
                this.certSerialField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string certKeyUsage {
            get {
                return this.certKeyUsageField;
            }
            set {
                this.certKeyUsageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string trustSp {
            get {
                return this.trustSpField;
            }
            set {
                this.trustSpField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> certDateFrom {
            get {
                return this.certDateFromField;
            }
            set {
                this.certDateFromField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> certDateTo {
            get {
                return this.certDateToField;
            }
            set {
                this.certDateToField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string tsAuthority {
            get {
                return this.tsAuthorityField;
            }
            set {
                this.tsAuthorityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> tsLenght {
            get {
                return this.tsLenghtField;
            }
            set {
                this.tsLenghtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public SignatureField signatureField {
            get {
                return this.signatureFieldField;
            }
            set {
                this.signatureFieldField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> valid {
            get {
                return this.validField;
            }
            set {
                this.validField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> validSign {
            get {
                return this.validSignField;
            }
            set {
                this.validSignField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> validCert {
            get {
                return this.validCertField;
            }
            set {
                this.validCertField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> validTrust {
            get {
                return this.validTrustField;
            }
            set {
                this.validTrustField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> validTimestamp {
            get {
                return this.validTimestampField;
            }
            set {
                this.validTimestampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string signErrCode {
            get {
                return this.signErrCodeField;
            }
            set {
                this.signErrCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string certErrCode {
            get {
                return this.certErrCodeField;
            }
            set {
                this.certErrCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string trustErrCode {
            get {
                return this.trustErrCodeField;
            }
            set {
                this.trustErrCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> p7mLevel {
            get {
                return this.p7mLevelField;
            }
            set {
                this.p7mLevelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string p7mPath {
            get {
                return this.p7mPathField;
            }
            set {
                this.p7mPathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] x509 {
            get {
                return this.x509Field;
            }
            set {
                this.x509Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.firmaremota.itagile.it")]
    public partial class Signatures {
        
        private Signature[] signaturesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("item")]
        public Signature[] signatures {
            get {
                return this.signaturesField;
            }
            set {
                this.signaturesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.firmaremota.itagile.it")]
    public partial class SignatureDocumentInfo {
        
        private Signatures signaturesField;
        
        private byte[] contentField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public Signatures signatures {
            get {
                return this.signaturesField;
            }
            set {
                this.signaturesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.firmaremota.itagile.it")]
    public partial class UserInfo {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.firmaremota.itagile.it")]
    public partial class SignatureImage {
        
        private string idField;
        
        private byte[] imageField;
        
        private int typeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] image {
            get {
                return this.imageField;
            }
            set {
                this.imageField = value;
            }
        }
        
        /// <remarks/>
        public int type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.firmaremota.itagile.it")]
    public partial class RemoteSignatureXadesParams {
        
        private string detachedReferenceURIField;
        
        private string elemenXPathField;
        
        private string formField;
        
        private string signatureIdField;
        
        private string typeField;
        
        private string validationDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string detachedReferenceURI {
            get {
                return this.detachedReferenceURIField;
            }
            set {
                this.detachedReferenceURIField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string elemenXPath {
            get {
                return this.elemenXPathField;
            }
            set {
                this.elemenXPathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string form {
            get {
                return this.formField;
            }
            set {
                this.formField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string signatureId {
            get {
                return this.signatureIdField;
            }
            set {
                this.signatureIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string validationData {
            get {
                return this.validationDataField;
            }
            set {
                this.validationDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.firmaremota.itagile.it")]
    public partial class SignatureFlags {
        
        private string counterSignaturePathField;
        
        private bool graphicalSignatureField;
        
        private bool ocspField;
        
        private bool timestampField;
        
        private bool cosignCoordinatesField;
        
        private string timestampCodeField;
        
        private int pdfSignatureLayoutField;
        
        private string passwordField;
        
        private int pdfSignatureCertificationLevelField;
        
        private bool cadesDetachedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string counterSignaturePath {
            get {
                return this.counterSignaturePathField;
            }
            set {
                this.counterSignaturePathField = value;
            }
        }
        
        /// <remarks/>
        public bool graphicalSignature {
            get {
                return this.graphicalSignatureField;
            }
            set {
                this.graphicalSignatureField = value;
            }
        }
        
        /// <remarks/>
        public bool ocsp {
            get {
                return this.ocspField;
            }
            set {
                this.ocspField = value;
            }
        }
        
        /// <remarks/>
        public bool timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        public bool cosignCoordinates {
            get {
                return this.cosignCoordinatesField;
            }
            set {
                this.cosignCoordinatesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string timestampCode {
            get {
                return this.timestampCodeField;
            }
            set {
                this.timestampCodeField = value;
            }
        }
        
        /// <remarks/>
        public int pdfSignatureLayout {
            get {
                return this.pdfSignatureLayoutField;
            }
            set {
                this.pdfSignatureLayoutField = value;
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public int pdfSignatureCertificationLevel {
            get {
                return this.pdfSignatureCertificationLevelField;
            }
            set {
                this.pdfSignatureCertificationLevelField = value;
            }
        }
        
        /// <remarks/>
        public bool cadesDetached {
            get {
                return this.cadesDetachedField;
            }
            set {
                this.cadesDetachedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getCertificatesCompletedEventHandler(object sender, getCertificatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCertificatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCertificatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void digestCompletedEventHandler(object sender, digestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class digestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal digestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void closeSignatureSessionCompletedEventHandler(object sender, closeSignatureSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class closeSignatureSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal closeSignatureSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void openSignatureSessionCompletedEventHandler(object sender, openSignatureSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class openSignatureSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal openSignatureSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void signPDFCompletedEventHandler(object sender, signPDFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class signPDFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal signPDFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void signCAdESCompletedEventHandler(object sender, signCAdESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class signCAdESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal signCAdESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void deleteUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void signP7MCompletedEventHandler(object sender, signP7MCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class signP7MCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal signP7MCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void signPDFPathCompletedEventHandler(object sender, signPDFPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class signPDFPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal signPDFPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void signXAdESCompletedEventHandler(object sender, signXAdESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class signXAdESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal signXAdESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getUserImagesCompletedEventHandler(object sender, getUserImagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserImagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserImagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SignatureImage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SignatureImage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void signPKCS1CompletedEventHandler(object sender, signPKCS1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class signPKCS1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal signPKCS1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void addUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void setUserImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void findUserCompletedEventHandler(object sender, findUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class findUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void documentP7mInfoCompletedEventHandler(object sender, documentP7mInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class documentP7mInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal documentP7mInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SignatureDocumentInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SignatureDocumentInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void timestampResponseCompletedEventHandler(object sender, timestampResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class timestampResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal timestampResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void signPKCS1ArrayCompletedEventHandler(object sender, signPKCS1ArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class signPKCS1ArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal signPKCS1ArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void timestampDetachedCompletedEventHandler(object sender, timestampDetachedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class timestampDetachedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal timestampDetachedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void isModuleActiveCompletedEventHandler(object sender, isModuleActiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isModuleActiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isModuleActiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void changePasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getUsersDirectoryTypeCompletedEventHandler(object sender, getUsersDirectoryTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsersDirectoryTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsersDirectoryTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void changeUserPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void documentXadesInfoCompletedEventHandler(object sender, documentXadesInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class documentXadesInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal documentXadesInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SignatureDocumentInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SignatureDocumentInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void verifyCertificateAtTimeCompletedEventHandler(object sender, verifyCertificateAtTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class verifyCertificateAtTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal verifyCertificateAtTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CertificateStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CertificateStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void verifySignaturesCompletedEventHandler(object sender, verifySignaturesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class verifySignaturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal verifySignaturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SignatureStatus[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SignatureStatus[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void documentPdfInfoCompletedEventHandler(object sender, documentPdfInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class documentPdfInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal documentPdfInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SignatureDocumentInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SignatureDocumentInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void timestampTokenCompletedEventHandler(object sender, timestampTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class timestampTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal timestampTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void verifyCertificateCompletedEventHandler(object sender, verifyCertificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class verifyCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal verifyCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CertificateStatus[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CertificateStatus[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void timestampAttachedCompletedEventHandler(object sender, timestampAttachedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class timestampAttachedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal timestampAttachedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591